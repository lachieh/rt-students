/** Declaration file generated by dts-gen */

export = superagent_defaults;

declare class superagent_defaults {
    constructor(superagent: any);

    abort(...args: any[]): any;

    accept(...args: any[]): any;

    agent(...args: any[]): any;

    applyStack(req: any): void;

    attach(...args: any[]): any;

    auth(...args: any[]): any;

    buffer(...args: any[]): any;

    ca(...args: any[]): any;

    callback(...args: any[]): any;

    catch(...args: any[]): any;

    cert(...args: any[]): any;

    checkout(url: any, fn: any): any;

    clearTimeout(...args: any[]): any;

    connect(url: any, fn: any): any;

    copy(url: any, fn: any): any;

    del(url: any, fn: any): any;

    delete(url: any, fn: any): any;

    emit(event: any, ...args: any[]): any;

    field(...args: any[]): any;

    get(url: any, fn: any): any;

    getHeader(...args: any[]): any;

    hasListeners(event: any): any;

    head(url: any, fn: any): any;

    key(...args: any[]): any;

    listeners(event: any): any;

    lock(url: any, fn: any): any;

    'm-search'(url: any, fn: any): any;

    maxResponseSize(...args: any[]): any;

    merge(url: any, fn: any): any;

    mkactivity(url: any, fn: any): any;

    mkcol(url: any, fn: any): any;

    move(url: any, fn: any): any;

    notify(url: any, fn: any): any;

    off(event: any, fn: any, ...args: any[]): any;

    ok(...args: any[]): any;

    on(event: any, fn: any): any;

    once(event: any, fn: any, ...args: any[]): any;

    options(url: any, fn: any): any;

    parse(...args: any[]): any;

    patch(url: any, fn: any): any;

    pfx(...args: any[]): any;

    pipe(...args: any[]): any;

    post(url: any, fn: any): any;

    propfind(url: any, fn: any): any;

    proppatch(url: any, fn: any): any;

    purge(url: any, fn: any): any;

    put(url: any, fn: any): any;

    query(...args: any[]): any;

    redirects(...args: any[]): any;

    removeAllListeners(event: any, fn: any, ...args: any[]): any;

    removeListener(event: any, fn: any, ...args: any[]): any;

    report(url: any, fn: any): any;

    request(...args: any[]): any;

    responseType(...args: any[]): any;

    retry(...args: any[]): any;

    search(url: any, fn: any): any;

    send(...args: any[]): any;

    serialize(...args: any[]): any;

    set(...args: any[]): any;

    sortQuery(...args: any[]): any;

    subscribe(url: any, fn: any): any;

    then(...args: any[]): any;

    timeout(...args: any[]): any;

    toJSON(...args: any[]): any;

    trace(url: any, fn: any): any;

    type(...args: any[]): any;

    unlock(url: any, fn: any): any;

    unset(...args: any[]): any;

    unsubscribe(url: any, fn: any): any;

    use(...args: any[]): any;

    withCredentials(...args: any[]): any;

    write(...args: any[]): any;
}
